services:
  web:
    build: .
    command: sh -c "python manage.py collectstatic --noinput && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DATABASE_DEBUG}
      - DB_HOST=${POSTGRES_HOST}
      - DB_PORT=${POSTGRES_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - celery
      - db

  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    depends_on:
      - web

  db:
    image: postgres:16
    environment:
      - DEBUG=${DATABASE_DEBUG}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST_AUTH_METHOD=${POSTGRES_HOST_AUTH_METHOD}
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
        interval: 30s
        timeout: 10s
        retries: 5

  redis:
    image: "redis:alpine"

  celery:
    build: .
    command: celery -A config worker -l INFO -P eventlet
    volumes:
      - .:/code
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DATABASE_HOST=${POSTGRES_HOST}
    depends_on:
      - redis
      - db

  beat:
    build: .
    command: celery -A config beat -l INFO
    volumes:
      - .:/code
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DATABASE_HOST=${POSTGRES_HOST}
    depends_on:
      - redis
      - db

networks:
  default:

volumes:
  postgres_data:
  static_volume:
  redis_data:
