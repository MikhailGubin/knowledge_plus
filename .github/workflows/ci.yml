name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache Poetry
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=\"$HOME/.local/bin:$PATH\"" >> $GITHUB_ENV

    - name: Install dependencies
      run: poetry install

    - name: Create .env file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}"
        echo "DATABASE_DEBUG=${{ secrets.DATABASE_DEBUG }}"
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" 
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" 
        echo "HOST=${{ secrets.HOST }}" 
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" 
        echo "POSTGRES_HOST_AUTH_METHOD=${{ secrets.POSTGRES_HOST_AUTH_METHOD }}" 
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" 
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" 
        echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" 
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}"
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}"
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}"
        echo "EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}"
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}"
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}"
        echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}"
        echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}"
        run: echo "CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}"
        ls -la .env

    - name: Run migrations
      run: poetry run python manage.py migrate

    - name: Run tests
      run: poetry run python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Copy project files to server
      run: |
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=\"$HOME/.local/bin:$PATH\"" >> $GITHUB_ENV

    - name: Install dependencies on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          poetry install
        EOF

    - name: Apply migrations on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py migrate
        EOF

    - name: Collect static files on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py collectstatic --noinput
        EOF

    - name: Restart application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo systemctl restart myapp.service
        EOF
