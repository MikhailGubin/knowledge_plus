name: Django CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache Poetry
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=\"$HOME/.local/bin:$PATH\"" >> $GITHUB_ENV

    - name: Install dependencies
      run: poetry install

    - name: Create .env file
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
        echo "DATABASE_DEBUG=${{ secrets.DATABASE_DEBUG }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "HOST=${{ secrets.HOST }}" >> .env
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
        echo "POSTGRES_HOST_AUTH_METHOD=${{ secrets.POSTGRES_HOST_AUTH_METHOD }}" >> .env
        echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
        echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
        echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
        echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
        echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
        echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
        echo "EMAIL_USE_SSL=${{ secrets.EMAIL_USE_SSL }}" >> .env
        echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
        echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
        echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }}" >> .env
        echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }}" >> .env

      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_DEBUG: ${{ secrets.DATABASE_DEBUG }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        HOST: ${{ secrets.HOST }}
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_USE_TLS: ${{ secrets.EMAIL_USE_TLS }}
        EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
        CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}

#    - name: Setup SSH
#      run: |
#        mkdir -p ~/.ssh
#        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
#        chmod 600 ~/.ssh/id_ed25519
#        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
#
#    - name: Test SSH connection
#      run: ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH works!'"
#
#    - name: Setup PostgreSQL
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#        sudo apt update
#        sudo apt install -y postgresql postgresql-contrib
#        sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"
#        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.POSTGRES_DB }} OWNER ${{ secrets.POSTGRES_USER }};"
#        sudo systemctl restart postgresql
#        EOF

#    - name: Setup SSH
#      run: |
#        mkdir -p ~/.ssh
#        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
#        chmod 600 ~/.ssh/id_ed25519
#        echo "${{ secrets.SERVER_IP }} ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI..." >> ~/.ssh/known_hosts

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
          sleep 1        
        done

    - name: Run migration and tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        HOST: localhost
      run: |
        poetry run manage.py migrate
        poetry run manage.py test
          

#    - name: Run database operations
#      run: |
#        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
#        cd ${{ secrets.DEPLOY_DIR }}
#
#        # Проверка подключения к БД
#        docker-compose exec -T web python manage.py check --database default
#
#        # Создание директории для статики
#        mkdir -p static
#
#        # Применение миграций
#        docker-compose exec -T web python manage.py migrate
#
#    - name: Wait for DB
#      run: |
#        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
#          cd ${{ secrets.DEPLOY_DIR }}
#          docker-compose exec -T db pg_isready -U postgres -h localhost -t 30
#        "
#
#    - name: Run tests
#      run: |
#        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "
#          cd ${{ secrets.DEPLOY_DIR }}
#          docker-compose exec -T web python manage.py test --keepdb --noinput
#        "
#      env:
#        DJANGO_SETTINGS_MODULE: config.settings.test

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Copy project files to server
      run: |
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=\"$HOME/.local/bin:$PATH\"" >> $GITHUB_ENV

    - name: Install dependencies on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          poetry install
        EOF

    - name: Apply migrations on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py migrate
        EOF

    - name: Collect static files on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          source venv/bin/activate
          python manage.py collectstatic --noinput
        EOF

    - name: Restart application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo systemctl restart myapp.service
        EOF
